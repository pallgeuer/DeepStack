Test Commands
=============

Default installer scripts:

- Look if README.md should be changed if you update anything! (Version numbers as well as example scripts in the how-to)

- Worry about:
	- nvidia-fs kernel objects and how to most appropriately install them (come in the CUDA 11.7+ runfiles but are by default disabled)
	- setuptools is fixed at 58.0.4 due to fundamental changes that happened beyond that at some point (removal of distutils?) => This is okay for now, but far into the future a better solution is desired

- https://developer.nvidia.com/cuda-toolkit-archive
	- If a patch for CUDA 10.2 newer than 10.2.2 is released then update install-cuda-10.2-cudnn-7.6.5.sh
	- If a version of CUDA 11.4 newer than 11.4.4 is released then update install-cuda-11.4-cudnn-8.3.2.sh
	- If a version of CUDA 11.5 newer than 11.5.2 is released then update install-cuda-11.5-cudnn-8.3.2.sh
	- If a version of CUDA 11.6 newer than 11.6.2 is released then update install-cuda-11.6-cudnn-8.4.1.sh
	- If a version of CUDA 11.7 newer than 11.7.1 is released then update install-cuda-11.7-cudnn-8.4.1.sh
	- If a version of CUDA 11.8 or newer is released then add it

- https://github.com/NVIDIA/cuda-samples/releases
	- If a version of CUDA 11.4 samples newer than 11.4.1 is released then update install-cuda-11.4-cudnn-8.3.2.sh
	- If a version of CUDA 11.5 samples newer than 11.5 is released then update install-cuda-11.5-cudnn-8.3.2.sh
	- If a version of CUDA 11.6 samples newer than 11.6 is released then update install-cuda-11.6-cudnn-8.4.1.sh
	- If a version of CUDA 11.7 samples newer than 11.6 (not a typo) is released then update install-cuda-11.7-cudnn-8.4.1.sh

- https://docs.nvidia.com/deeplearning/cudnn/archives/index.html (-> Support Matrix)
	- Which cuDNN version to associate with which CUDA version is determined by which cuDNN/CUDA version pairings are explicitly targeted by TensorRT releases (see below)

- https://docs.nvidia.com/deeplearning/tensorrt/archives/index.html (-> Support Matrix)
	- BE CAREFUL WITH CAPITALISATION OF "TensorRT" AND "Linux" IN THE TENSORRT URLS (should be capitalised)
	- SET CFG_TENSORRT_ONNX_TAG AS DESCRIBED IN THE NEXT PARAGRAPH
	- SET CFG_TENSORRT_PYTORCH BASED ON ATTEMPTING INSTALLATION WITH IT COMMENTED OUT FIRST (DEFAULT: 1)
	- If a version of TensorRT 8.2.X > 8.2.5 is released that targets cuDNN 8.2.1 and CUDA 11.3 then update the TensorRT version in install-pytorch-1.10.2-cuda-11.3-trtext-8.2.5.sh and install-pytorch-1.11.0-cuda-11.3-trtext-8.2.5.sh
	- If some cuDNN 8.4.X > 8.4.1 becomes the targeted cuDNN for some non-EA TensorRT >=8.4 then update the cuDNN version in install-cuda-11.6-cudnn-8.4.1.sh and install-cuda-11.7-cudnn-8.4.1.sh, and update the TensorRT version in install-pytorch-1.12.1-cuda-11.6-trtext-8.4.2.sh
	- If some cuDNN >=8.5 becomes the targeted cuDNN for some non-EA TensorRT >=8.5 then use that cuDNN version for CUDA 11.8+

- https://github.com/onnx/onnx-tensorrt/tags
	- If a version of onnx-tensorrt newer than f42daeee49f2517a954c5601f0f76bef9ed94b62 (current head of origin/8.2-GA branch) is released that explicitly supports TensorRT 8.2.3+ then update install-pytorch-1.10.2-cuda-11.3-trtext-8.2.5.sh and install-pytorch-1.11.0-cuda-11.3-trtext-8.2.5.sh
	- If a version of onnx-tensorrt newer than c3cfcbc8248c6bd007e6630af2085df5e4834b42 (one commit after release/8.4-GA) is released that explicitly supports TensorRT 8.4.1+ then update install-pytorch-1.12.1-cuda-11.6-trtext-8.4.2.sh

- https://github.com/opencv/opencv-python/releases
	- NOTE: You can only continue to update the OpenCV versions once ceres-solver releases a tag >2.1.0 on conda => conda search -c conda-forge ceres-solver (https://github.com/ceres-solver/ceres-solver/tags)
	- If the opencv-python GitHub releases a tag newer than 63 for OpenCV 3 then update install-opencv-python-3.4.17-cuda-10.2.sh
	- If the opencv-python GitHub releases a tag newer than 64 for OpenCV 4 then update install-opencv-python-4.5.5-cuda-10.2.sh and install-opencv-python-4.5.5-cuda-11.6.sh
	- If the selected OpenCV 4 version supports Python 3.11 then update install-opencv-python-4.5.5-cuda-11.6.sh
	- If OpenCV 5 is released then add it

- https://github.com/opencv/opencv/tags
	- NOTE: You can only continue to update the OpenCV versions once ceres-solver releases a tag >2.1.0 on conda => conda search -c conda-forge ceres-solver (https://github.com/ceres-solver/ceres-solver/tags)
	- If a version of OpenCV newer than 4.5.5 is released then update install-pytorch-1.11.0-cuda-*.sh and install-pytorch-1.12.1-cuda-*.sh

- https://pytorch.org/get-started/locally (also: conda search -c pytorch magma-cuda*)
	- If a version of PyTorch 1.11 newer than 1.11.0 is released then update install-pytorch-1.11.0-cuda-*.sh
	- If a version of PyTorch 1.12 newer than 1.12.1 is released then update install-pytorch-1.12.1-cuda-*.sh
	- If a version of PyTorch 1.13 or newer is released then add it
	- If a new version of PyTorch is released then check whether it explicitly supports TensorRT 8 yet, and update if so

- If PyTorch, Torchvision, Torchaudio, Torchtext, TensorRT, OpenCV all support Python 3.11 then update wherever you can:
	- https://github.com/pytorch/vision#installation
	- https://github.com/pytorch/audio#dependencies
	- https://github.com/pytorch/text#installation
	- https://docs.nvidia.com/deeplearning/tensorrt/archives/index.html -> Support Matrix -> Ctrl+F "Python wheel"
	- conda search -c conda-forge opencv | grep py311
	- conda search -c pytorch pytorch | egrep 'py3\.?11'

- Look if README.md should be changed if you update anything! (Version numbers as well as example scripts in the how-to)

- Test installing all installers (conda changes can cause failures!) => CUDA + OpenCV Python + PyTorch

Further links:

- cuDNN
	- https://developer.nvidia.com/rdp/cudnn-download (newest)
	- https://developer.nvidia.com/rdp/cudnn-archive (all except newest)
	- https://docs.nvidia.com/deeplearning/cudnn/archives/index.html (-> Support Matrix)

You can test all CUDA installers using:
	# Make sure no clashing installations already present
	# Give console infinite scrollback
	# NOTE: Use "${installers[@]:3}" for example to skip the first 3 installers, or "${installers[@]:3:2}" to skip 3 installers and execute only the next 2 (order of installers is version-sorted)
	cd ~/Programs/DeepStack
	installers=($(find -maxdepth 1 -name "install-cuda-*.sh" -printf '%P\n' | sort -V)); for installer in "${installers[@]}"; do echo; echo "RUNNING INSTALLER: $installer"; if CFG_CLEAN_INSTALLERS=0 ./"$installer"; then notify-send -a Konsole -h string:desktop-entry:org.kde.konsole SUCCESS "Successfully installed: $installer"; else notify-send -a Konsole -h string:desktop-entry:org.kde.konsole FAILURE "FAILED TO INSTALL: $installer"; fi; done
	# UNDO: for uninstaller in Uninstallers/uninstall-cuda-*.sh; do KEEP_INSTALLERS=1 "$uninstaller"; done

You can test all OpenCV Python installers using:
	# Ensure all required CUDA versions are installed
	# Make sure no clashing installations already present
	# Give console infinite scrollback
	# NOTE: Use "${installers[@]:3}" for example to skip the first 3 installers, or "${installers[@]:3:2}" to skip 3 installers and execute only the next 2 (order of installers is version-sorted)
	cd ~/Programs/DeepStack
	installers=($(find -maxdepth 1 -name "install-opencv-python-*.sh" -printf '%P\n' | sort -V)); CFG_STAGE=-1 ./"${installers[0]}"; for installer in "${installers[@]}"; do echo; echo "RUNNING INSTALLER: $installer"; if CFG_ALLOW_SUDO=0 CFG_CLEAN_WORKDIR=0 CFG_CLEAN_CONDA=0 CFG_CONDA_SAVE=1 ./"$installer"; then notify-send -a Konsole -h string:desktop-entry:org.kde.konsole SUCCESS "Successfully installed: $installer"; else notify-send -a Konsole -h string:desktop-entry:org.kde.konsole FAILURE "FAILED TO INSTALL: $installer"; fi; done; conda clean -y --all
	# UNDO: for uninstaller in Uninstallers/uninstall-opencv-*.sh; do "$uninstaller"; done

You can test all PyTorch installers using:
	# Ensure all required CUDA versions are installed
	# Make sure no clashing installations already present
	# Consider manually pre-downloading all the required TensorRT installers
	# Give console infinite scrollback
	# NOTE: Use "${installers[@]:3}" for example to skip the first 3 installers, or "${installers[@]:3:2}" to skip 3 installers and execute only the next 2 (order of installers is version-sorted)
	# NOTE: By default, the following commands UNINSTALL all successfully completed installers!
	cd ~/Programs/DeepStack
	installers=($(find -maxdepth 1 -name "install-pytorch-*.sh" -printf '%P\n' | sort -V)); CFG_STAGE=-1 ./"${installers[0]}"; for installer in "${installers[@]}"; do echo; echo "RUNNING INSTALLER: $installer"; if CFG_ALLOW_SUDO=0 CFG_CLEAN_INSTALLERS=0 CFG_CLEAN_CONDA=0 CFG_CONDA_SAVE=1 ./"$installer"; then notify-send -a Konsole -h string:desktop-entry:org.kde.konsole SUCCESS "Successfully installed: $installer (auto-uninstalling again)"; uninstaller="${installer#install-}"; uninstaller="uninstall-${uninstaller%.sh}-pytorch.sh"; KEEP_INSTALLERS=1 Uninstallers/"$uninstaller"; else notify-send -a Konsole -h string:desktop-entry:org.kde.konsole FAILURE "FAILED TO INSTALL: $installer"; fi; done; conda clean -y --all
	# UNDO: for uninstaller in Uninstallers/uninstall-pytorch-*.sh; do KEEP_INSTALLERS=1 "$uninstaller"; done
